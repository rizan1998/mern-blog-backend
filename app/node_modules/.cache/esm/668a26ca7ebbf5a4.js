let Schema,model,hash,compare,sign;_7eb‍.x([["default",()=>_7eb‍.o]]);_7eb‍.w("mongoose",[["Schema",["Schema"],function(v){Schema=v}],["model",["model"],function(v){model=v}]]);_7eb‍.w("bcryptjs",[["hash",["hash"],function(v){hash=v}],["compare",["compare"],function(v){compare=v}]]);_7eb‍.w("jsonwebtoken",[["sign",["sign"],function(v){sign=v}]]);



const PostSchema = new Schema(
  {
    title: { type: String, required: true },
    caption: { type: String, required: true },
    slug: { type: String, required: true },
    body: { type: Object, required: true },
    photo: { type: String, required: false },
    user: { type: Schema.Types.ObjectId, ref: "User" },
    tags: { type: [String], required: false },
    categories: { type: Schema.Types.ObjectId, ref: "PostCategories" },
  },
  { timestamps: true }
);

PostSchema.virtual("comments", {
  ref: "Comment",
  localField: "_id",
  foreignField: "post",
});

const Post = model("Post", PostSchema);
_7eb‍.d(Post);
